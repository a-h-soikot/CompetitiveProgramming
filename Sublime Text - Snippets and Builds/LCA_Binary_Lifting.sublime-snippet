<snippet>
	<content><![CDATA[
class LCA {
    int timer = 0, n, k;
public:
    vector<int> tin, tout, depth;
    vector<vector<int>> up;

    void dfs(int v, int par, vector<int> G[]) {
        tin[v] = ++timer; 
        up[v][0] = par;

        for(int i = 1; i <= k; i++) {
            up[v][i] = up[up[v][i-1]][i-1];
        }

        for(int u : G[v]) {
            if(u != par) {
                depth[u] = depth[v] + 1;
                dfs(u, v, G);
            }
        }

        tout[v] = ++timer;
    }

    void build(int N, vector<int> G[]) {
        this->n = N; this->k = log2(n) + 1;
        tin.resize(n+1); tout.resize(n+1); 
        depth.resize(n+1);
        up.assign(n+1, vector<int> (k+1, 1));

        dfs(1, 1, G);
    }

    bool is_ancestor (int u, int v) { // is v an ancestor of u
        return (tin[v] <= tin[u] and tout[u] <= tout[v]);
    }

    int query(int u, int v) {
        if(is_ancestor(u, v)) return v;
        if(is_ancestor(v, u)) return u;

        for(int i = k; i >= 0; i--) { // keep 'u' still and move 'v' up
            if(!is_ancestor(u, up[v][i])) v = up[v][i];
        }

        return up[v][0];
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>gLCABinaryLifting</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
